'****************************************************************
'*  Name    : UNTITLED.BAS                                      *
'*  Author  : Robert Hudson                                     *
'*  Notice  : Copyright (c) 2021 [select VIEW...EDITOR OPTIONS] *
'*          : All Rights Reserved                               *
'*  Date    : 21/02/2021                                        *
'*  Version : 1.0                                               *
'*  Notes   :                                                   *
'*          :                                                   *
'****************************************************************
include "modedefs.bas"

#config
    __config _INTRC_OSC_NOCLKOUT & _WDT_OFF & _MCLRE_OFF & _CP_OFF
#endconfig

define OSC 8
define CHAR_PACING 1000
define ADC_BITS 10
define ADC_SAMPLEUS 50
define ADC_CLOCK 3


red_led var PORTA.5
liver_led var PORTC.2
liver_pt con 7          ' Analogue port used as input for liver phototransistor
button_led var PORTA.2    
button_pt con 3         ' Analogue port used as input for button phototransistor
wireless_tx var PORTC.4
tx_power var PORTA.0
batt_volts var PORTA.3
temp_sensor con 4       ' Analogue port used as input for temperature sensor
current_sensor con 5    ' Analogue port used as input for battery current sensor

baud_300 con 3313 | %0100000000000000
baud_600 con 1646 | %0100000000000000
baud_1200 con 813 | %0100000000000000
N_BUTTON con 10
N_LIVER con 50
NUM_U con 30
BUTTON_THRESHOLD con 100
BUTTON_DELAY con 100
READING_DELAY con 1000
TX_REPS con 3

button_request var byte
reading var word
checksum var byte
temperature var word
current var word
dark var word
light var word
i var byte

init:
    OSCCON = %1110111
    ANSEL = %10001000
    ADCON0 = %11011101
    ADCON1 = %00110000
    TRISA = %11011010
    TRISC = %11101011
    CMCON0 = %00000000
    
    ' Save device id in internal EEPROM to allow calibration between devices
    device_id data @0, 0




mainloop:
    low tx_power
    low wireless_tx
    high liver_led
    high button_led
    high red_led
    
    gosub check_voltage
    
    gosub check_current
    
    if current > 512 then
        ' Device is NOT charging
        gosub read_button
        if button_request = 0 then
            high red_led
            pause BUTTON_DELAY
        else
            low red_led
            gosub take_measurement
            pause READING_DELAY
        endif
    else
        ' Could send control messages back to base unit to monitor charging
        'serout2 wireless_tx, baud_1200, ["Charging"]
        pause 1000
    endif
goto mainloop



read_button:
    ' Use 2.5V reference
    ADCON0.6 = 1
    
    reading = 0
    dark = 0
    light = 0
    
    for i = 1 to N_BUTTON
        low button_led
        pause 1
        adcin button_pt, light  ' read in light data
        high button_led
        pause 1
        adcin button_pt, dark   ' read in dark data
        
        ' Add current readings to sum
        ' Dark should be > light if measurement variation is due to our probe
        if dark >= light then
            reading = reading + (dark - light)
        endif
    next i  
    
    'Compute mean
    reading = reading / N_BUTTON
    
    if reading > BUTTON_THRESHOLD then
        button_request = 1
    else
        button_request = 0
    endif
return



take_measurement:
    ' Use 2.5V reference
    ADCON0.6 = 1
    
    reading = 0
    dark = 0
    light = 0
    
    for i = 1 to N_LIVER
        low liver_led
        pause 1
        adcin liver_pt, light  ' read in light data
        high liver_led
        pause 1
        adcin liver_pt, dark   ' read in dark data
        
        ' Add current readings to sum
        ' Dark should be > light if measurement variation is due to our probe
        if dark >= light then
            reading = reading + (dark - light)
        endif
    next i  
    
    ' Compute mean
    reading = reading / N_LIVER
    
    ' Compute checksum to send with data
    checksum = reading.byte1 ^ reading.byte0
    
    ' Measure current temperature
    ' Use 5V reference
    ADCON0.6 = 0
    adcin temp_sensor, temperature
    gosub check_current
    ' Send data back to base unit
    ' Repetitions are for redundancy to avoid missed packets
    serout2 wireless_tx, baud_1200, [rep "U"\NUM_U]
    for i = 1 to TX_REPS
        serout2 wireless_tx, baud_1200, [" m ", dec4 reading, " c ", checksum, " t ", dec4 temperature]
    next i

return



check_voltage:
    ' If battery under-voltage condition is detected, turn everything off until the batteries are charged
    while batt_volts = 0
        high tx_power
        high red_led
        high liver_led
        high button_led
        low wireless_tx
        OSCCON = %00000001
    wend
return


check_current:
    ' Measure battery current
    ' Use 5V reference
    ADCON0.6 = 0
    current = 0
    for i = 1 to 50
        adcin current_sensor, light
        current = current + light
    next i
    current = current / 50
return
