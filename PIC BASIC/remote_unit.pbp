'****************************************************************
'*  Name    : UNTITLED.BAS                                      *
'*  Author  : Robert Hudson                                     *
'*  Notice  : Copyright (c) 2021 [select VIEW...EDITOR OPTIONS] *
'*          : All Rights Reserved                               *
'*  Date    : 21/02/2021                                        *
'*  Version : 1.0                                               *
'*  Notes   :                                                   *
'*          :                                                   *
'****************************************************************
include "modedefs.bas"

define OSC 8
define CHAR_PACING 1000
define ADC_BITS 10
define ADC_SAMPLEUS 50
define ADC_CLOCK 3


red_led var PORTA.5
liver_led var PORTC.2
liver_pt con 7          'Analogue port used as input for liver phototransistor
button_led var PORTA.2
button_pt con 3         'Analogue port used as input for button phototransistor
serial_out var PORTC.4
tx_power var PORTA.0

baud con N300
baud_300 con 3313 | %0100000000000000
baud_600 con 1646 | %0100000000000000
baud_1200 con 813 | %0100000000000000
N con 50
NUM_U con 5
BUTTON_THRESHOLD con 100
BUTTON_DELAY con 100
READING_DELAY con 100

button_request var byte
reading var word
checksum var byte
dark var word
light var word
i var byte

init:
    'ANSEL = %10001000
    'ADCON0 = %11011101
    'ADCON1 = %00110000
    'TRISA = %00010000
    'TRISC = %00001000
    'OSCCON = %1110111
    'CMCON0 = %00000000
ANSEL = %10001000
ADCON0 = %11011101
ADCON1 = %00110000
TRISA = %11011010'%00011011
TRISC = %11101011'%00101000
OSCCON = %1110111
CMCON0 = %00000000

low tx_power


mainloop:
    'high liver_led
    high button_led
    high red_led

    gosub read_button
    if button_request = 0 then
        high red_led
        pause BUTTON_DELAY
    else
        low red_led
        gosub take_measurement
        pause READING_DELAY
    endif
goto mainloop



read_button:
    reading = 0
    dark = 0
    light = 0
    
    for i = 1 to 10
        low button_led
        pause 1
        adcin button_pt, light  'read in light data
        'high button_led
        pause 1
        adcin button_pt, dark   'read in dark data
        
        ' Add current readings to sum
        ' Dark should be > light if measurement variation is due to our probe
        if dark >= light then
            reading = reading + (dark - light)
        endif
    next i  
    
    'Compute mean
    reading = reading / 10
    
    if reading > BUTTON_THRESHOLD then
        button_request = 1
    else
        button_request = 0
    endif
return



take_measurement:
    reading = 0
    dark = 0
    light = 0
    
    for i = 1 to N
        low liver_led
        pause 1
        adcin liver_pt, light  'read in light data
        high liver_led
        pause 1
        adcin liver_pt, dark   'read in dark data
        
        ' Add current readings to sum
        ' Dark should be > light if measurement variation is due to our probe
        if dark >= light then
            reading = reading + (dark - light)
        endif
    next i  
    
    'Compute mean
    reading = reading / N
    
    'Compute checksum to send with data
    checksum = reading.byte1 ^ reading.byte0
    
    serout2 serial_out, baud_300, [rep "U"\NUM_U]
    serout2 serial_out, baud_1200, [" m ", dec4 reading]', checksum, " m ", dec4 reading, checksum, " m ", dec4 reading, checksum]

return
