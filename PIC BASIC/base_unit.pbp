'****************************************************************
'*  Name    : UNTITLED.BAS                                      *
'*  Author  : Robert Hudson                                     *
'*  Notice  : Copyright (c) 2021 [select VIEW...EDITOR OPTIONS] *
'*          : All Rights Reserved                               *
'*  Date    : 22/02/2021                                        *
'*  Version : 1.0                                               *
'*  Notes   :                                                   *
'*          :                                                   *
'****************************************************************
include "modedefs.bas"

#config
    CONFIG  PLLDIV = 5            ; Divide by 5 (20 MHz oscillator input)
    CONFIG  CPUDIV = OSC1_PLL2    ; [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
    CONFIG  USBDIV = 2            ; USB clock source comes from the 96 MHz PLL divided by 2
    CONFIG  FOSC = INTOSCIO_EC       ; HS oscillator, PLL enabled (HSPLL)
    CONFIG  FCMEN = OFF           ; Fail-Safe Clock Monitor disabled
    CONFIG  IESO = OFF            ; Oscillator Switchover mode disabled
    CONFIG  PWRT = OFF            ; PWRT disabled
    CONFIG  BOR = ON              ; Brown-out Reset enabled in hardware only (SBOREN is disabled)
    CONFIG  BORV = 3              ; Minimum setting
    CONFIG  VREGEN = ON           ; USB voltage regulator enabled
    CONFIG  WDT = OFF             ; WDT disabled
    CONFIG  WDTPS = 512           ; 1:512
    CONFIG  CCP2MX = OFF          ; CCP2 input/output is multiplexed with RB3
    CONFIG  PBADEN = OFF          ; PORTB<4:0> pins are configured as digital I/O on Reset
    CONFIG  LPT1OSC = OFF         ; Timer1 configured for higher power operation
    CONFIG  MCLRE = ON            ; MCLR pin enabled; RE3 input pin disabled
    CONFIG  STVREN = ON           ; Stack full/underflow will cause Reset
    CONFIG  LVP = OFF             ; Single-Supply ICSP disabled
    CONFIG  XINST = OFF           ; Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
    CONFIG  DEBUG = OFF           ; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
    CONFIG  CP0 = OFF             ; Block 0 (000800-001FFFh) is not code-protected
    CONFIG  CP1 = OFF             ; Block 1 (002000-003FFFh) is not code-protected
    CONFIG  CP2 = OFF             ; Block 2 (004000-005FFFh) is not code-protected
    CONFIG  CP3 = OFF             ; Block 3 (006000-007FFFh) is not code-protected
    CONFIG  CPB = OFF             ; Boot block (000000-0007FFh) is not code-protected
    CONFIG  CPD = OFF             ; Data EEPROM is not code-protected
    CONFIG  WRT0 = OFF            ; Block 0 (000800-001FFFh) is not write-protected
    CONFIG  WRT1 = OFF            ; Block 1 (002000-003FFFh) is not write-protected
    CONFIG  WRT2 = OFF            ; Block 2 (004000-005FFFh) is not write-protected
    CONFIG  WRT3 = OFF            ; Block 3 (006000-007FFFh) is not write-protected
    CONFIG  WRTC = OFF            ; Configuration registers (300000-3000FFh) are not write-protected
    CONFIG  WRTB = OFF            ; Boot block (000000-0007FFh) is not write-protected
    CONFIG  WRTD = OFF            ; Data EEPROM is not write-protected
    CONFIG  EBTR0 = OFF           ; Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks
    CONFIG  EBTR1 = OFF           ; Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks
    CONFIG  EBTR2 = OFF           ; Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks
    CONFIG  EBTR3 = OFF           ; Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks
    CONFIG  EBTRB = OFF           ; Boot block (000000-0007FFh) is not protected from table reads executed in other blocks
#endconfig

define OSC 8
define CHAR_PACING 1000

define ADC_BITS 10
define ADC_SAMPLEUS 50
define ADC_CLOCK 3

DEFINE CCP2_REG PORTB 'Channel-2 port
DEFINE CCP2_BIT 3 'Channel-2 bit

' Set LCD Data port
DEFINE LCD_DREG PORTA
' Set starting Data bit (0 or 4) if 4-bit bus
DEFINE LCD_DBIT 0
' Set LCD Register Select port
DEFINE LCD_RSREG PORTA
' Set LCD Register Select bit
DEFINE LCD_RSBIT 5
' Set LCD Enable port
DEFINE LCD_EREG PORTA
' Set LCD Enable bit
DEFINE LCD_EBIT 4
' Set LCD bus size (4 or 8 bits)
DEFINE LCD_BITS 4
' Set number of lines on LCD
DEFINE LCD_LINES 4
' Set command delay time in us
DEFINE LCD_COMMANDUS 1500
' Set data delay time in us
DEFINE LCD_DATAUS 44

define I2C_SCL PORTB, 1
define I2C_SDA PORTB, 0
define I2C_SLOW 0
define I2C_HOLD 1


wireless_rx var PORTA.6
wireless_tx var PORTB.2
rs232_out var PORTC.6
rs232_in var PORTC.7

enable_charger var PORTA.1
pwm_sig var PORTB.3

sw_menu var PORTE.3
sw_ok var PORTB.7
sw_up var PORTC.2
sw_down var PORTB.6  

lcd_power var PORTB.4

scl var PORTB.1
sda var PORTB.0



baud_300 con 3313 | %0100000000000000
baud_600 con 1646 | %0100000000000000
baud_1200 con 813 | %0100000000000000
MESSAGE_REPEATS con 3
READING_DELAY con 1000
LCD_DELAY con 1
BUTTON_DELAY con 250

eeprom_addr var byte         'EEPROM I2C address
eeprom_addr = %10100000
rtc_addr var byte               ' RTC I2C address
rtc_addr = %11011110
addr var word                   'Memory addr to write/read to (needs to be word length)
addr = 0

reading var word
temperature var word
checksum var byte

i var byte
menu_option var byte
reading_id var byte
request_id var byte
reading_counter var byte
first_time var byte

month var byte
day var byte
hour var byte
minute var byte
second var byte



init:           
    OSCCON = %1110010
    PORTA = 0
    PORTB = 0
    PORTC = 0
    TRISA = %01000000
    TRISB = %11000000
    TRISC = %10111111
    ADCON0 = 0
    ADCON1 = %00001111
    T1CON = 0           'Turn off secondary oscillator
    T3CON = 0
    UCON = %10          'Turn off USB
    UCFG = %00001000
    UIE = 0
    UEIE = 0
    
    'Reset reading counter at programming time
    reading_addr data @0, 0
    'Read in current value at runtime
    read reading_addr, reading_counter
    i2cwrite sda, scl, eeprom_addr, $00, [0,0,0,0,0,0,0,0,0], i2c_failed
    
pwm_init:
    ' Set up PWM to run in hardware at 55kHz
    PR2 = 35
    CCPR2L = %00010010
    CCP2CON.5 = 0
    CCP2CON.4 = 0
    TRISB.3 = 0                                     
    T2CON = %00000100
    CCP2CON = %00001111
    
    
mainloop:
    ' Delay to allow LCD to initialise
    pause 500
    first_time = 1
    reading = 0
    temperature = 0
    checksum = 0
    high lcd_power
    goto menu
goto mainloop


menu:
    high lcd_power
    menu_option = 0
    
    ' Draw menu
    lcdout $FE, 1
    pause LCD_DELAY
    lcdout $FE, $80, "MENU"
    
    lcdout $FE, $C0+2, "Take readings"
    pause LCD_DELAY
    
    lcdout $FE, $94+2, "View memory"
    pause LCD_DELAY
    
    lcdout $FE, $D4+2, "Delete all memory"
    pause LCD_DELAY
    
    gosub draw_arrow
    
    menu_loop:
        gosub write_time
        
        ' Check for a button press
        ' OK => goto selected state
        if sw_ok = 0 then
            on menu_option goto take_readings, view_readings, delete_menu
        ' DOWN => Move arrow down
        elseif sw_down = 0 then
            menu_option = (menu_option + 1) //3
            gosub draw_arrow
            pause BUTTON_DELAY
        'UP => Move arrow up
        elseif sw_up = 0 then
            if menu_option = 0 then
                menu_option = 2
            else
                menu_option = (menu_option - 1) // 3
            endif
            gosub draw_arrow
            pause BUTTON_DELAY
        endif
    goto menu_loop
goto menu



draw_arrow:
' Draws arrow on menu screen
    if menu_option == 0 then
        lcdout $FE, $C0, $7E
        lcdout $FE, $94, " "
        lcdout $FE, $D4, " "
    elseif menu_option == 1 then
        lcdout $FE, $C0, " "
        lcdout $FE, $94, $7E
        lcdout $FE, $D4, " "
    else
        lcdout $FE, $C0, " "
        lcdout $FE, $94, " "
        lcdout $FE, $D4, $7E
    endif
return



take_readings:
    high lcd_power
    lcdout $FE, 1
    pause LCD_DELAY
    gosub write_time
    
    lcdout $FE, $C0, "READING: ", dec reading               'Write reading
    pause LCD_DELAY
    
    lcdout $FE, $94                                         'Move cursor to 3rd line
    pause LCD_DELAY
    if reading = 0 then
        'Pass
    elseif reading < 750 then
        lcdout "GOOD LIVER"
    else   
        lcdout "BAD LIVER"
    endif
    pause LCD_DELAY
    
    gosub convert_temperature
    lcdout $FE, $D4, "TEMPERATURE: ", dec temperature       'Write temperature
    
    pause 100
    
    serin2 wireless_rx, baud_1200, [wait("m"), dec4 reading, wait("c "), checksum, wait("t"), dec4 temperature]
    
    if checksum = reading.byte1 ^ reading.byte0 then
        ' Save data to memory
        reading_counter = reading_counter + 1
        addr = reading_counter * 9
        gosub get_time
        i2cwrite sda, scl, eeprom_addr, addr, [reading_counter, reading, temperature, month, day, hour, minute], i2c_failed
        ' Save new reading_counter to on-chip EEPROM
        write reading_addr, reading_counter
    else
        reading = 0
    endif

goto take_readings




delete_menu:
    high lcd_power
    lcdout $FE, 1
    pause LCD_DELAY
    lcdout $FE, $80, "WARNING - This will"
    pause LCD_DELAY
    lcdout $FE, $C0+1, "delete ALL memory"
    pause LCD_DELAY
    lcdout $FE, $94, "Press OK to continue"
    pause LCD_DELAY
    lcdout $FE, $D4+6, "MENU to cancel"
    pause LCD_DELAY
    
    pause 1000
    
    'Check option and goto menu or delete
    delete_choice:
        if sw_up = 0 or sw_down = 0 then
            pause 500
            goto menu
        elseif sw_ok = 0 then
            goto delete
        endif
        pause 10
    goto delete_choice
goto delete_menu



delete:
    high lcd_power
        
    ' Reset reading counter. This will allow EEPROM to be recovered by reprogramming
    ' PIC if it is deleted by accident
    write reading_addr, 0
    reading_counter = 0
    
    lcdout $FE, 1
    pause LCD_DELAY
    lcdout $FE, $C0+4, "All readings"
    pause LCD_DELAY
    lcdout $FE, $94+6, "deleted"      
    pause LCD_DELAY

    pause 2000
goto menu




view_readings:
    ' Displays readings stored in EEPROM
    
    if reading_counter = 0 then
        gosub no_readings
        goto menu
    endif    
    
    ' Draw the display the first time the loop runs, and set requested reading
    ' to the last one in memory
    if first_time = 1 then
        request_id = reading_counter
        gosub draw_readings
        first_time = 0
    endif
    
    high lcd_power
    
    ' Move to a previous reading if DOWN is pressed
    if sw_down = 0 then
        request_id = request_id - 2
        if request_id = 1 then
            request_id = 2
        elseif request_id = 0 then
            request_id = reading_counter
        endif
                
        gosub draw_readings
        pause BUTTON_DELAY
        
    ' Move to the next reading if UP is pressed
    elseif sw_up = 0 then
        request_id = request_id + 2
        if request_id = reading_counter + 1 then
            request_id = reading_counter
        elseif request_id > reading_counter then
            request_id = 2
        endif
        
        gosub draw_readings
        pause BUTTON_DELAY
    endif
goto view_readings


draw_readings:  
    ' Draws readings in EEPROM on LCD at preset request_id
    lcdout $FE, 1
    pause LCD_DELAY    
    
    lcdout $FE, $C0+19, $7E
    pause LCD_DELAY
    lcdout $FE, $94+19, $7F
    pause LCD_DELAY
    
    addr = (request_id - 1) * 9
    gosub get_reading
    lcdout $FE, $80, dec4 reading_id, " ", dec2 day, "/", dec2 month, " ", dec2 hour, ":", dec2 minute 'Write 4 digit ID, month/day hour:min
    pause LCD_DELAY
    lcdout $FE, $C0+4, "READING: ", dec reading
    pause LCD_DELAY
    
    addr = request_id * 9
    gosub get_reading
    lcdout $FE, $94, dec4 reading_id, " ", dec2 day, "/", dec2 month, " ", dec2 hour, ":", dec2 minute 'Write 4 digit ID, month/day hour:min
    pause LCD_DELAY
    lcdout $FE, $D4+4, "READING: ", dec reading
    pause LCD_DELAY
return


get_reading:
    ' Fetches reading from EEPROM at preset addr
    i2cread sda, scl, eeprom_addr, addr, [reading_id, reading, temperature, month, day, hour, minute], i2c_failed
return
    
    
no_readings:
    lcdout $FE, 1
    pause LCD_DELAY
    lcdout $FE, $C0+4, "No Readings"
    pause LCD_DELAY
    lcdout $FE, $94+5, "in Memory"
    pause LCD_DELAY
    pause 2000
    return




    
get_time: ' Read RTC
    month = 0
    day = 0
    hour = 0
    minute = 0
    second = 0
return

convert_temperature: ' Convert PIC ADC o/p to Celsius
return
 
i2c_failed: ' Error handling for I2C failure
return

write_time:
'Writes current time to top right corner
    gosub get_time
    lcdout $FE, $80 + 12, dec2 menu_option, ":", dec2 request_id, ":", dec2 reading_counter    'Write time   rep " "\12
    pause LCD_DELAY
return
