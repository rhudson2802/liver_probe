'****************************************************************
'*  Name    : UNTITLED.BAS                                      *
'*  Author  : Robert Hudson                                     *
'*  Notice  : Copyright (c) 2021 [select VIEW...EDITOR OPTIONS] *
'*          : All Rights Reserved                               *
'*  Date    : 10/05/2021                                        *
'*  Version : 1.0                                               *
'*  Notes   :                                                   *
'*          :                                                   *
'****************************************************************

#if __PROCESSOR__ = "18F2550"
    #config
        CONFIG  PLLDIV = 5            ; Divide by 5 (20 MHz oscillator input)
        CONFIG  CPUDIV = OSC1_PLL2    ; [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
        CONFIG  USBDIV = 2            ; USB clock source comes from the 96 MHz PLL divided by 2
        CONFIG  FOSC = INTOSCIO_EC       ; HS oscillator, PLL enabled (HSPLL)
        CONFIG  FCMEN = OFF           ; Fail-Safe Clock Monitor disabled
        CONFIG  IESO = OFF            ; Oscillator Switchover mode disabled
        CONFIG  PWRT = OFF            ; PWRT disabled
        CONFIG  BOR = ON              ; Brown-out Reset enabled in hardware only (SBOREN is disabled)
        CONFIG  BORV = 3              ; Minimum setting
        CONFIG  VREGEN = OFF           ; USB voltage regulator disabled
        CONFIG  WDT = OFF             ; WDT disabled
        CONFIG  WDTPS = 512           ; 1:512
        CONFIG  CCP2MX = OFF          ; CCP2 input/output is multiplexed with RB3
        CONFIG  PBADEN = OFF          ; PORTB<4:0> pins are configured as digital I/O on Reset
        CONFIG  LPT1OSC = OFF         ; Timer1 configured for higher power operation
        CONFIG  MCLRE = ON            ; MCLR pin enabled; RE3 input pin disabled
        CONFIG  STVREN = ON           ; Stack full/underflow will cause Reset
        CONFIG  LVP = OFF             ; Single-Supply ICSP disabled
        CONFIG  XINST = OFF           ; Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
        CONFIG  DEBUG = OFF           ; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
        CONFIG  CP0 = OFF             ; Block 0 (000800-001FFFh) is not code-protected
        CONFIG  CP1 = OFF             ; Block 1 (002000-003FFFh) is not code-protected
        CONFIG  CP2 = OFF             ; Block 2 (004000-005FFFh) is not code-protected
        CONFIG  CP3 = OFF             ; Block 3 (006000-007FFFh) is not code-protected
        CONFIG  CPB = OFF             ; Boot block (000000-0007FFh) is not code-protected
        CONFIG  CPD = OFF             ; Data EEPROM is not code-protected
        CONFIG  WRT0 = OFF            ; Block 0 (000800-001FFFh) is not write-protected
        CONFIG  WRT1 = OFF            ; Block 1 (002000-003FFFh) is not write-protected
        CONFIG  WRT2 = OFF            ; Block 2 (004000-005FFFh) is not write-protected
        CONFIG  WRT3 = OFF            ; Block 3 (006000-007FFFh) is not write-protected
        CONFIG  WRTC = OFF            ; Configuration registers (300000-3000FFh) are not write-protected
        CONFIG  WRTB = OFF            ; Boot block (000000-0007FFh) is not write-protected
        CONFIG  WRTD = OFF            ; Data EEPROM is not write-protected
        CONFIG  EBTR0 = OFF           ; Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTR1 = OFF           ; Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTR2 = OFF           ; Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTR3 = OFF           ; Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTRB = OFF           ; Boot block (000000-0007FFh) is not protected from table reads executed in other blocks
    #endconfig
    
    ' Set LCD Data port
    DEFINE LCD_DREG PORTA
    ' Set starting Data bit (0 or 4) if 4-bit bus
    DEFINE LCD_DBIT 0
    ' Set LCD Register Select port
    DEFINE LCD_RSREG PORTA
    ' Set LCD Register Select bit
    DEFINE LCD_RSBIT 5
    ' Set LCD Enable port
    DEFINE LCD_EREG PORTA
    ' Set LCD Enable bit
    DEFINE LCD_EBIT 4
    
    'DEFINE CCP2_REG PORTB 'Channel-2 port
    'DEFINE CCP2_BIT 3 'Channel-2 bit
    
    define I2C_SCL PORTB, 1
    define I2C_SDA PORTB, 0
    
    
    PORTA = 0
    PORTB = 0
    PORTC = 0
    TRISA = 0
    TRISB = %11010100
    TRISC = %10010110
    OSCCON = %1110010
    ADCON0 = 0
    ADCON1 = %00001111
    'ADCON2 = 
    T1CON = 0           'Turn off secondary oscillator
    T3CON = 0
    UCON = %10        'Turn off USB
    UCFG = %00001000
    UIE = 0
    UEIE = 0
    
    
    ' Set up PWM to run in hardware
    'PR2 = 19
    'CCPR2L = %00001010
    'CCP2CON.5 = 0
    'CCP2CON.4 = 0
    'TRISB.3 = 0
    'T2CON = %00000100
    'CCP2CON = %00001111
    
#else
    #if __PROCESSOR__ = "16F688"
        #config
            __config _INTRC_OSC_NOCLKOUT & _WDT_OFF & _MCLRE_ON & _CP_OFF
        #endconfig
    #else
        #error "Program does not support " + __PROCESSOR__
    #endif
    
    
    ' Set LCD Data port
    DEFINE LCD_DREG PORTC
    ' Set starting Data bit (0 or 4) if 4-bit bus
    DEFINE LCD_DBIT 0
    ' Set LCD Register Select port
    DEFINE LCD_RSREG PORTC
    ' Set LCD Register Select bit
    DEFINE LCD_RSBIT 4
    ' Set LCD Enable port
    DEFINE LCD_EREG PORTC
    ' Set LCD Enable bit
    DEFINE LCD_EBIT 5
    
    ANSEL = %00000000
    TRISA = %00000000
    TRISC = %00000000
    OSCCON = %1110111
#endif


'define INTHAND _myint
define OSC 8

led var PORTA.5
scl var PORTB.1
sda var PORTB.0
rs232_in var PORTC.7
rs232_out var PORTC.6

baud_1200 con 813 | %0100000000000000
eeprom_addr var byte         'EEPROM I2C address
eeprom_addr = %10100000
rtc_addr var byte               ' RTC I2C address
rtc_addr = %11011110
addr var word                   'Memory addr to write/read to (needs to be word length)
addr = 0
x var byte[32]
i var byte
time var byte[7]
flag var byte
flag = $FF
              
pause 10
serout2 rs232_out, baud_1200, [10, 10, "hello world", 10]
'i2cwrite sda, scl, eeprom_addr, addr, ["this is a IIB project"], i2c_failed
'pause 10
addr = 10
i2cread sda, scl, eeprom_addr, addr, [str x\8]
serout2 rs232_out, baud_1200, [str x\8, 10, 10]
'for i = 1 to 8  
'    pause 10
'    i2cread sda, scl, eeprom_addr, [x]
'    pause 10
'    serout2 rs232_out, baud_1200, [x]
'next i
    
'serout2 rs232_out, baud_1200, [10, "I2C succeeded", 10]



time[0] = $00    'Seconds
time[1] = %01010100    'Minutes
time[2] = %00010000    'Hours
time[3] = %00000110    'Weekday
time[4] = %00010101    'Day
time[5] = %00000101    'Month
time[6] = %00100001    'Year
        




i2cread sda, scl, rtc_addr, $03, [x[0]]
serout2 rs232_out, baud_1200, [bin8 x[0], 10, 10]


' Write time to rtc

i2cwrite sda, scl, rtc_addr, $07, %01000011  ' Output square wave on MFP

'addr = $00
i2cwrite sda, scl, rtc_addr, $00, %00000000 'Seconds
pause 1000

'addr = $03
while flag.5 == 1
    high led
    i2cread sda, scl, rtc_addr, $03, [flag]
wend

'addr = $00
i2cwrite sda, scl, rtc_addr, $00, [str time\7]
    

'i2cwrite sda, scl, rtc_addr, $01, [%01000101, %00010010, %00000001, %00010000, %00000101 ,%00100001]'Minutes
'i2cwrite sda, scl, rtc_addr, $02, %00010010 'Hours
'i2cwrite sda, scl, rtc_addr, $03, %00000001 'Weekday
'i2cwrite sda, scl, rtc_addr, $04, %00010000 'Day
'i2cwrite sda, scl, rtc_addr, $05, %00000101 'Month
'i2cwrite sda, scl, rtc_addr, $06, %00100001 'Year (tens and units)


'addr = $00
i2cwrite sda, scl, rtc_addr, $00, %10000000, i2c_failed
'addr = $07
i2cwrite sda, scl, rtc_addr, $07, %01001011  ' Output square wave on MFP

pause 1000

'addr = $03                          
i2cread sda, scl, rtc_addr, $03, [x[0]]
serout2 rs232_out, baud_1200, ["0 ", bin8 x[0], 10, 10]

pause 2000


mainloop:
    'addr = $00
    i2cread sda, scl, rtc_addr, $00, [str x\8], i2c_failed
    for i = 0 to 7
        serout2 rs232_out, baud_1200, [dec i, " ", bin8 x[i], 10]
    next i
    serout2 rs232_out, baud_1200, [10]
    
    high led
    pause 500
    low led
    pause 500
    
goto mainloop


i2c_failed:
    serout2 rs232_out, baud_1200, ["No I2C ACK received", 10]
    goto mainloop
