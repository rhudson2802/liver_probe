'****************************************************************
'*  Name    : UNTITLED.BAS                                      *
'*  Author  : Robert Hudson                                     *
'*  Notice  : Copyright (c) 2020 [select VIEW...EDITOR OPTIONS] *
'*          : All Rights Reserved                               *
'*  Date    : 14/11/2020                                        *
'*  Version : 1.0                                               *
'*  Notes   :                                                   *
'*          :                                                   *
'****************************************************************
include "modedefs.bas"

#if __PROCESSOR__ = "18F2550"
    #config
        CONFIG  PLLDIV = 5            ; Divide by 5 (20 MHz oscillator input)
        CONFIG  CPUDIV = OSC1_PLL2    ; [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
        CONFIG  USBDIV = 2            ; USB clock source comes from the 96 MHz PLL divided by 2
        CONFIG  FOSC = INTOSCIO_EC       ; HS oscillator, PLL enabled (HSPLL)
        CONFIG  FCMEN = OFF           ; Fail-Safe Clock Monitor disabled
        CONFIG  IESO = OFF            ; Oscillator Switchover mode disabled
        CONFIG  PWRT = OFF            ; PWRT disabled
        CONFIG  BOR = ON              ; Brown-out Reset enabled in hardware only (SBOREN is disabled)
        CONFIG  BORV = 3              ; Minimum setting
        CONFIG  VREGEN = OFF           ; USB voltage regulator disabled
        CONFIG  WDT = OFF             ; WDT disabled
        CONFIG  WDTPS = 512           ; 1:512
        CONFIG  CCP2MX = OFF          ; CCP2 input/output is multiplexed with RB3
        CONFIG  PBADEN = OFF          ; PORTB<4:0> pins are configured as digital I/O on Reset
        CONFIG  LPT1OSC = OFF         ; Timer1 configured for higher power operation
        CONFIG  MCLRE = ON            ; MCLR pin enabled; RE3 input pin disabled
        CONFIG  STVREN = ON           ; Stack full/underflow will cause Reset
        CONFIG  LVP = OFF             ; Single-Supply ICSP disabled
        CONFIG  XINST = OFF           ; Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
        CONFIG  DEBUG = OFF           ; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
        CONFIG  CP0 = OFF             ; Block 0 (000800-001FFFh) is not code-protected
        CONFIG  CP1 = OFF             ; Block 1 (002000-003FFFh) is not code-protected
        CONFIG  CP2 = OFF             ; Block 2 (004000-005FFFh) is not code-protected
        CONFIG  CP3 = OFF             ; Block 3 (006000-007FFFh) is not code-protected
        CONFIG  CPB = OFF             ; Boot block (000000-0007FFh) is not code-protected
        CONFIG  CPD = OFF             ; Data EEPROM is not code-protected
        CONFIG  WRT0 = OFF            ; Block 0 (000800-001FFFh) is not write-protected
        CONFIG  WRT1 = OFF            ; Block 1 (002000-003FFFh) is not write-protected
        CONFIG  WRT2 = OFF            ; Block 2 (004000-005FFFh) is not write-protected
        CONFIG  WRT3 = OFF            ; Block 3 (006000-007FFFh) is not write-protected
        CONFIG  WRTC = OFF            ; Configuration registers (300000-3000FFh) are not write-protected
        CONFIG  WRTB = OFF            ; Boot block (000000-0007FFh) is not write-protected
        CONFIG  WRTD = OFF            ; Data EEPROM is not write-protected
        CONFIG  EBTR0 = OFF           ; Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTR1 = OFF           ; Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTR2 = OFF           ; Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTR3 = OFF           ; Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks
        CONFIG  EBTRB = OFF           ; Boot block (000000-0007FFh) is not protected from table reads executed in other blocks
    #endconfig
    
    ' Set LCD Data port
    DEFINE LCD_DREG PORTA
    ' Set starting Data bit (0 or 4) if 4-bit bus
    DEFINE LCD_DBIT 0
    ' Set LCD Register Select port
    DEFINE LCD_RSREG PORTA
    ' Set LCD Register Select bit
    DEFINE LCD_RSBIT 5
    ' Set LCD Enable port
    DEFINE LCD_EREG PORTA
    ' Set LCD Enable bit
    DEFINE LCD_EBIT 4
    
    'DEFINE CCP2_REG PORTB 'Channel-2 port
    'DEFINE CCP2_BIT 3 'Channel-2 bit
    
    
    PORTA = 0
    PORTB = 0
    PORTC = 0
    TRISA = 0
    TRISB = %11010100
    TRISC = %10010110
    OSCCON = %1110010
    ADCON0 = 0
    ADCON1 = %00001111
    'ADCON2 = 
    T1CON = 0           'Turn off secondary oscillator
    T3CON = 0
    UCON = %10        'Turn off USB
    UCFG = %00001000
    UIE = 0
    UEIE = 0
    
    
    ' Set up PWM to run in hardware
    PR2 = 35
    CCPR2L = %00010010
    CCP2CON.5 = 0
    CCP2CON.4 = 0
    TRISB.3 = 0                                     
    T2CON = %00000100
    CCP2CON = %00001111     
#else
    #if __PROCESSOR__ = "16F688"
        #config
            __config _INTRC_OSC_NOCLKOUT & _WDT_OFF & _MCLRE_ON & _CP_OFF
        #endconfig
        
        ANSEL = %00000000
        ADCON0 = %11011101
        TRISA = %00100000
        TRISC = %00100000
        OSCCON = %1110111   
    #else
        #error "Program does not support " + __PROCESSOR__
    #endif
#endif

define OSC 8
define CHAR_PACING 1000
define ADC_BITS 10
define ADC_SAMPLEUS 50

MAX_STRING_LENGTH con 20


            
'led var PORTC.0
serial_out var PORTC.6
serial_in var PORTA.6
baud con N1200
baud_1200 con 813 | %0100000000000000
baud_600 con 1646 | %0100000000000000
baud_300 con 3313 | %0100000000000000
             
message_length var byte
message var byte[2]
checksum var byte
message_check var byte
x var word
i var word
cnt var word



serout serial_out, baud, ["hello world", 10]
cnt = 0
mainloop:
    'high led
    serin2 serial_in, baud_1200,  [wait("m "), dec2 message[0], dec2 message[1]]', checksum]
    'low led
    x = message[0] * 100 + message[1]
    cnt = cnt + 1
    'message_check = x.byte0 ^ x.byte1
    serout2 serial_out, baud_1200, ["REC: ", dec4 x, " NUM: ", dec3 cnt, 10]'dec checksum, " ", dec message_check, 10]
    'serout serial_out, baud, ["received"]'#message[0], #message[1], 10]
goto mainloop



' Gets message in the form: "liver LENGTH\nliver MESSAGE\n"
fetch_message:
    serin2 serial_in, baud_300, [wait("liver "), dec2 message_length]
    'low led
    ' Make sure message won't overflow array
    if message_length > MAX_STRING_LENGTH then
        serout2 serial_out, baud_1200, ["MESSAGE TOO LONG"]
    else
        serout serial_out, baud, ["fetch ", #message_length, 10]
        serin2 serial_in, baud_300, [wait("liver "), str message\message_length\10]
        'serout2 PORTC.4, 16780, ["fetch ", str message\(message_length), 10]
    endif
return

' Gets message and echoes it to serout
echo_message:
    gosub fetch_message
    serout2 serial_out, baud_1200, [str message\(message_length), 10]
return

end
